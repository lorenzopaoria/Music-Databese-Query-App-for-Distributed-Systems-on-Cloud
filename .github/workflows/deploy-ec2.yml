name: Deploy Docker Container on EC2

on:
  push:
    branches: [ main, master ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate EC2 connection
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          timeout: 60s
          script: |
            echo "Connessione EC2 stabilita con successo"
            whoami
            pwd
            docker --version || echo "Docker non installato"

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          timeout: 600s
          command_timeout: 30m
          script: |
            set -e
            
            # Verifica e crea la directory del progetto se non esiste
            if [ ! -d "/home/ec2-user/Music-Databese-Query-App-for-Distributed-Systems-on-Cloud" ]; then
              echo "Clonando il repository..."
              cd /home/ec2-user
              git clone https://github.com/YOUR_USERNAME/Music-Databese-Query-App-for-Distributed-Systems-on-Cloud.git
            fi
            
            # Naviga nella directory del progetto
            cd /home/ec2-user/Music-Databese-Query-App-for-Distributed-Systems-on-Cloud
            
            # Effettua pull delle modifiche dal repository
            echo "Effettuando pull del repository..."
            git fetch origin
            git reset --hard origin/main
            
            # Ferma tutti i container che usano la porta 8080
            echo "Fermando tutti i container che usano la porta 8080..."
            docker ps -q --filter "publish=8080" | xargs -r docker stop || true
            docker ps -aq --filter "publish=8080" | xargs -r docker rm || true
            
            # Ferma il container specifico per nome (doppia sicurezza)
            echo "Fermando il container musicapp-server..."
            docker stop musicapp-server 2>/dev/null || true
            docker rm musicapp-server 2>/dev/null || true
            
            # Aspetta un momento per assicurarsi che le risorse siano liberate
            echo "Attendendo la liberazione delle risorse..."
            sleep 5
            
            # Verifica che la porta 8080 sia libera
            echo "Verificando che la porta 8080 sia libera..."
            if netstat -tulpn 2>/dev/null | grep :8080 || ss -tulpn 2>/dev/null | grep :8080; then
              echo "Attenzione: la porta 8080 è ancora in uso"
              # Forza la terminazione di processi sulla porta 8080
              sudo fuser -k 8080/tcp 2>/dev/null || true
              sleep 3
            else
              echo "Porta 8080 è libera"
            fi
            
            # Pulisce le immagini Docker non utilizzate
            echo "Pulizia immagini Docker..."
            docker system prune -f
            
            # Ricostruisce e avvia il container Docker
            echo "Ricostruendo il container Docker..."
            docker build -f Dockerfile.dockerfile -t musicapp-server .
            
            # Avvia il nuovo container
            echo "Avviando il nuovo container..."
            
            # Verifica ancora una volta che non ci siano conflitti di porta
            if docker ps --filter "publish=8080" --format "table {{.Names}}" | grep -v NAMES | grep -q .; then
              echo "Errore: rilevato container che usa ancora la porta 8080"
              docker ps --filter "publish=8080"
              exit 1
            fi
            
            # Avvia il container con gestione errori migliorata
            if ! docker run -d \
              --name musicapp-server \
              -p 8080:8080 \
              --restart unless-stopped \
              musicapp-server; then
              echo "Errore nell'avvio del container"
              echo "Verifica dei container in esecuzione:"
              docker ps -a
              echo "Verifica dell'uso della porta 8080:"
              netstat -tulpn 2>/dev/null | grep :8080 || ss -tulpn 2>/dev/null | grep :8080 || echo "Nessun processo sulla porta 8080"
              exit 1
            fi
            
            # Verifica che il container sia in esecuzione
            echo "Verifica del container in esecuzione..."
            sleep 15
            
            # Controlla lo stato del container
            if docker ps | grep -q "musicapp-server"; then
              echo "Container musicapp-server è in esecuzione"
              docker ps -a --filter "name=musicapp-server"
            else
              echo "Container musicapp-server NON è in esecuzione"
              echo "Log del container:"
              docker logs musicapp-server 2>/dev/null || echo "Nessun log disponibile"
              exit 1
            fi
            
            # Controlla la salute dell'applicazione
            echo "Test di connettività all'applicazione..."
            for i in {1..10}; do
              if curl -f http://localhost:8080 &>/dev/null; then
                echo "Applicazione risponde correttamente"
                break
              else
                echo "Tentativo $i/10 - Applicazione non ancora pronta, attendo 10 secondi..."
                sleep 10
              fi
              if [ $i -eq 10 ]; then
                echo "Applicazione non risponde dopo 10 tentativi"
                echo "Log del container:"
                docker logs musicapp-server
                exit 1
              fi
            done
            
            echo "Deploy completato!"
